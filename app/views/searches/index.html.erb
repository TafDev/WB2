<div class="banner">
	<p>Workout Buddy Search</p>
</div>
<div class="ui inline cookie nag">
  <span class="title">
    In order to give you the most accurate results we automatically request your location. This helps us show you users closest to you.
  </span>
	<i class="close icon"></i>
</div>
<br>
<div class="ui container">
	<div class="ui grid">
		<div class="four wide column">
			<%= render 'new' %>
		</div>
		<div class="twelve wide column">
			<h1>Search Results</h1>
			<div class="ui top attached tabular menu">
				<a id="list"class="item active" data-tab="list">list view</a>
				<a id="mapView" class="item" data-tab="mapView">map view</a>
			</div>
			<div class="ui bottom attached tab segment active" data-tab="list">
				<div id="searches">
					<%= render @profiles  %>
				</div>
			</div>
			<div class="ui bottom attached tab segment" data-tab="mapView">
				<div id='map'></div>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript" charset="utf-8">

    var map;
    var markers = [];
    var position = <%= {lat: current_user.profile.latitude , lng: current_user.profile.longitude }.to_json.html_safe %>;
    var users = [
        <%= @profiles.map do |profile|
	        unless profile.longitude.nil?
	          profile1 = render(profile).to_json.html_safe
						"{userId: #{profile.user.id}, id: #{profile.id}, profile: #{profile1}, latitude: #{profile.latitude}, longitude: #{profile.longitude}}"
					end
			 end.join(", ").html_safe %>];

    function createId(id) {
		    return "marker-" + id.toString();
    }


    //searching through the markers array to find a matching id
    //it will return google maps marker object

    function findMarker(userId) {
		    var marker;
		    for (var i = 0; i < markers.length; ++i) {
		        if (markers[i].id == createId(userId)) {
		            marker = markers[i].marker;
		            return marker;
		        }
		    }
    }

    function addMarker(position, content, userId, icon) {
        var marker = new google.maps.Marker({
            id: createId(userId),
            position: position,
            map: map,
            icon: icon
        });
        marker.addListener('click', function() {
            infowindow.open(map, marker);
        });
        var infowindow = new google.maps.InfoWindow({
            content: content
        });
        //adding marker object to markers array
        markers.push({
            id: createId(userId),
            marker: marker
        });
    }


    function initMap() {

        map = new google.maps.Map(document.getElementById('map'), {
						center: position,
            zoom: 16
        });
        users.forEach(function (user) {
            var content = user.profile;
            var icon1 = "assets/markers/paragon-1-green.png";
            var icon2 = "assets/markers/paragon-1-red.png";
            var position1 = {lat: user.latitude, lng: user.longitude};
            if (user.userId == <%= current_user.id %>) {
                addMarker(position1, content, <%= current_user.id %>, icon1);
            }
            else {
                addMarker(position1, content, user.id, icon2);
            }
        });


//        addMarker(position, "You are here", <%#= current_user.id %> );

        var tab = $('#mapView');
        tab.one('click', function(){
            google.maps.event.trigger(map, 'resize');
            map.setCenter(position)
        });

        var geo = navigator.geolocation;
        if (geo) {
            geo.getCurrentPosition(function(data) {
                var pos = new google.maps.LatLng(data.latitude, data.longitude);
//                map.setCenter(pos);
                    App.location.create({
                        user_id: <%= current_user.id %>,
                        latitude: data.coords.latitude,
                        longitude: data.coords.longitude
                    });
                }, function error(msg) {
                    $("#error").html(msg);
                    console.log(msg);
                },
                {
                    timeout: 20000,
                    maximumAge: 900,
                    enableHighAccuracy: true
                });
            }
    }

    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
            'Error: The Geolocation service failed.' :
            'Error: Your browser doesn\'t support geolocation.');
    }

    $('.cookie.nag')
        .nag('show')
    ;

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDqvvsundfpZo9u4bL_3CA1Ws2KTZMRAq0&callback=initMap"
        async defer>
</script>
